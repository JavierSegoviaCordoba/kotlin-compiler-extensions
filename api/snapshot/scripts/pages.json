[{"name":"abstract class BaseTestRunner : AbstractKotlinCompilerTest","description":"com.javiersc.kotlin.compiler.test.runners.BaseTestRunner","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-base-test-runner/index.html","searchKeys":["BaseTestRunner","abstract class BaseTestRunner : AbstractKotlinCompilerTest","com.javiersc.kotlin.compiler.test.runners.BaseTestRunner"]},{"name":"abstract class BoxTest : BaseTestRunner, RunnerWithTargetBackendForTestGeneratorMarker","description":"com.javiersc.kotlin.compiler.test.runners.BoxTest","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-box-test/index.html","searchKeys":["BoxTest","abstract class BoxTest : BaseTestRunner, RunnerWithTargetBackendForTestGeneratorMarker","com.javiersc.kotlin.compiler.test.runners.BoxTest"]},{"name":"abstract class DiagnosticTest : BaseTestRunner","description":"com.javiersc.kotlin.compiler.test.runners.DiagnosticTest","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-diagnostic-test/index.html","searchKeys":["DiagnosticTest","abstract class DiagnosticTest : BaseTestRunner","com.javiersc.kotlin.compiler.test.runners.DiagnosticTest"]},{"name":"abstract class MetaRuntimeClasspathProvider(testServices: TestServices, isLoggingEnabled: Boolean = false) : RuntimeClasspathProvider","description":"com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-meta-runtime-classpath-provider/index.html","searchKeys":["MetaRuntimeClasspathProvider","abstract class MetaRuntimeClasspathProvider(testServices: TestServices, isLoggingEnabled: Boolean = false) : RuntimeClasspathProvider","com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider"]},{"name":"abstract fun CompilerPluginRegistrar.ExtensionStorage.registerExtensions(module: TestModule, configuration: CompilerConfiguration)","description":"com.javiersc.kotlin.compiler.test.runners.BoxTest.registerExtensions","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-box-test/register-extensions.html","searchKeys":["registerExtensions","abstract fun CompilerPluginRegistrar.ExtensionStorage.registerExtensions(module: TestModule, configuration: CompilerConfiguration)","com.javiersc.kotlin.compiler.test.runners.BoxTest.registerExtensions"]},{"name":"abstract fun CompilerPluginRegistrar.ExtensionStorage.registerExtensions(module: TestModule, configuration: CompilerConfiguration)","description":"com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.registerExtensions","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-diagnostic-test/register-extensions.html","searchKeys":["registerExtensions","abstract fun CompilerPluginRegistrar.ExtensionStorage.registerExtensions(module: TestModule, configuration: CompilerConfiguration)","com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.registerExtensions"]},{"name":"abstract val jarPaths: List<String>","description":"com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.jarPaths","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-meta-runtime-classpath-provider/jar-paths.html","searchKeys":["jarPaths","abstract val jarPaths: List<String>","com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.jarPaths"]},{"name":"class AdditionalFilesProvider(testServices: TestServices, baseDir: String = \".\") : AdditionalSourceProvider","description":"com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-additional-files-provider/index.html","searchKeys":["AdditionalFilesProvider","class AdditionalFilesProvider(testServices: TestServices, baseDir: String = \".\") : AdditionalSourceProvider","com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider"]},{"name":"class ClasspathConfigurator(val jarPaths: List<String>, testServices: TestServices, isLoggingEnabled: Boolean) : EnvironmentConfigurator","description":"com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-classpath-configurator/index.html","searchKeys":["ClasspathConfigurator","class ClasspathConfigurator(val jarPaths: List<String>, testServices: TestServices, isLoggingEnabled: Boolean) : EnvironmentConfigurator","com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator"]},{"name":"constructor()","description":"com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.BaseTestRunner","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-base-test-runner/-base-test-runner.html","searchKeys":["BaseTestRunner","constructor()","com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.BaseTestRunner"]},{"name":"constructor()","description":"com.javiersc.kotlin.compiler.test.runners.BoxTest.BoxTest","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-box-test/-box-test.html","searchKeys":["BoxTest","constructor()","com.javiersc.kotlin.compiler.test.runners.BoxTest.BoxTest"]},{"name":"constructor()","description":"com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.DiagnosticTest","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-diagnostic-test/-diagnostic-test.html","searchKeys":["DiagnosticTest","constructor()","com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.DiagnosticTest"]},{"name":"constructor(jarPaths: List<String>, testServices: TestServices, isLoggingEnabled: Boolean)","description":"com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator.ClasspathConfigurator","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-classpath-configurator/-classpath-configurator.html","searchKeys":["ClasspathConfigurator","constructor(jarPaths: List<String>, testServices: TestServices, isLoggingEnabled: Boolean)","com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator.ClasspathConfigurator"]},{"name":"constructor(testServices: TestServices, baseDir: String = \".\")","description":"com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider.AdditionalFilesProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-additional-files-provider/-additional-files-provider.html","searchKeys":["AdditionalFilesProvider","constructor(testServices: TestServices, baseDir: String = \".\")","com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider.AdditionalFilesProvider"]},{"name":"constructor(testServices: TestServices, isLoggingEnabled: Boolean = false)","description":"com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.MetaRuntimeClasspathProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-meta-runtime-classpath-provider/-meta-runtime-classpath-provider.html","searchKeys":["MetaRuntimeClasspathProvider","constructor(testServices: TestServices, isLoggingEnabled: Boolean = false)","com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.MetaRuntimeClasspathProvider"]},{"name":"fun setUp()","description":"com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.Companion.setUp","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-base-test-runner/-companion/set-up.html","searchKeys":["setUp","fun setUp()","com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.Companion.setUp"]},{"name":"inline fun <D : DiagnosticTest, B : BoxTest> generateKotlinCompilerTests()","description":"com.javiersc.kotlin.compiler.test.generateKotlinCompilerTests","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test/generate-kotlin-compiler-tests.html","searchKeys":["generateKotlinCompilerTests","inline fun <D : DiagnosticTest, B : BoxTest> generateKotlinCompilerTests()","com.javiersc.kotlin.compiler.test.generateKotlinCompilerTests"]},{"name":"object AdditionalFilesDirectives : SimpleDirectivesContainer","description":"com.javiersc.kotlin.compiler.test.services.AdditionalFilesDirectives","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-additional-files-directives/index.html","searchKeys":["AdditionalFilesDirectives","object AdditionalFilesDirectives : SimpleDirectivesContainer","com.javiersc.kotlin.compiler.test.services.AdditionalFilesDirectives"]},{"name":"object Companion","description":"com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.Companion","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-base-test-runner/-companion/index.html","searchKeys":["Companion","object Companion","com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.Companion"]},{"name":"open fun commonServicesConfiguration(): (FrontendKind<*>) -> Unit?","description":"com.javiersc.kotlin.compiler.test.runners.BoxTest.commonServicesConfiguration","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-box-test/common-services-configuration.html","searchKeys":["commonServicesConfiguration","open fun commonServicesConfiguration(): (FrontendKind<*>) -> Unit?","com.javiersc.kotlin.compiler.test.runners.BoxTest.commonServicesConfiguration"]},{"name":"open fun commonServicesConfiguration(): (FrontendKind<*>) -> Unit?","description":"com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.commonServicesConfiguration","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-diagnostic-test/common-services-configuration.html","searchKeys":["commonServicesConfiguration","open fun commonServicesConfiguration(): (FrontendKind<*>) -> Unit?","com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.commonServicesConfiguration"]},{"name":"open override fun TestConfigurationBuilder.configuration()","description":"com.javiersc.kotlin.compiler.test.runners.BoxTest.configuration","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-box-test/configuration.html","searchKeys":["configuration","open override fun TestConfigurationBuilder.configuration()","com.javiersc.kotlin.compiler.test.runners.BoxTest.configuration"]},{"name":"open override fun TestConfigurationBuilder.configuration()","description":"com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.configuration","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-diagnostic-test/configuration.html","searchKeys":["configuration","open override fun TestConfigurationBuilder.configuration()","com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.configuration"]},{"name":"open override fun createKotlinStandardLibrariesPathProvider(): KotlinStandardLibrariesPathProvider","description":"com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.createKotlinStandardLibrariesPathProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-base-test-runner/create-kotlin-standard-libraries-path-provider.html","searchKeys":["createKotlinStandardLibrariesPathProvider","open override fun createKotlinStandardLibrariesPathProvider(): KotlinStandardLibrariesPathProvider","com.javiersc.kotlin.compiler.test.runners.BaseTestRunner.createKotlinStandardLibrariesPathProvider"]},{"name":"open override fun createKotlinStandardLibrariesPathProvider(): KotlinStandardLibrariesPathProvider","description":"com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.createKotlinStandardLibrariesPathProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-diagnostic-test/create-kotlin-standard-libraries-path-provider.html","searchKeys":["createKotlinStandardLibrariesPathProvider","open override fun createKotlinStandardLibrariesPathProvider(): KotlinStandardLibrariesPathProvider","com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.createKotlinStandardLibrariesPathProvider"]},{"name":"open override fun produceAdditionalFiles(globalDirectives: RegisteredDirectives, module: TestModule): List<TestFile>","description":"com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider.produceAdditionalFiles","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-additional-files-provider/produce-additional-files.html","searchKeys":["produceAdditionalFiles","open override fun produceAdditionalFiles(globalDirectives: RegisteredDirectives, module: TestModule): List<TestFile>","com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider.produceAdditionalFiles"]},{"name":"open override fun runtimeClassPaths(module: TestModule): List<File>","description":"com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.runtimeClassPaths","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-meta-runtime-classpath-provider/runtime-class-paths.html","searchKeys":["runtimeClassPaths","open override fun runtimeClassPaths(module: TestModule): List<File>","com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.runtimeClassPaths"]},{"name":"open override val directiveContainers: List<DirectivesContainer>","description":"com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider.directiveContainers","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-additional-files-provider/directive-containers.html","searchKeys":["directiveContainers","open override val directiveContainers: List<DirectivesContainer>","com.javiersc.kotlin.compiler.test.services.AdditionalFilesProvider.directiveContainers"]},{"name":"open override val targetBackend: TargetBackend","description":"com.javiersc.kotlin.compiler.test.runners.BoxTest.targetBackend","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-box-test/target-backend.html","searchKeys":["targetBackend","open override val targetBackend: TargetBackend","com.javiersc.kotlin.compiler.test.runners.BoxTest.targetBackend"]},{"name":"open val runtimeClasspathProvider: <Error class: unknown class><MetaRuntimeClasspathProvider>? = null","description":"com.javiersc.kotlin.compiler.test.runners.BoxTest.runtimeClasspathProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-box-test/runtime-classpath-provider.html","searchKeys":["runtimeClasspathProvider","open val runtimeClasspathProvider: <Error class: unknown class><MetaRuntimeClasspathProvider>? = null","com.javiersc.kotlin.compiler.test.runners.BoxTest.runtimeClasspathProvider"]},{"name":"open val runtimeClasspathProvider: <Error class: unknown class><MetaRuntimeClasspathProvider>? = null","description":"com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.runtimeClasspathProvider","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.runners/-diagnostic-test/runtime-classpath-provider.html","searchKeys":["runtimeClasspathProvider","open val runtimeClasspathProvider: <Error class: unknown class><MetaRuntimeClasspathProvider>? = null","com.javiersc.kotlin.compiler.test.runners.DiagnosticTest.runtimeClasspathProvider"]},{"name":"val SOME_FILE_DIRECTIVE: SimpleDirective","description":"com.javiersc.kotlin.compiler.test.services.AdditionalFilesDirectives.SOME_FILE_DIRECTIVE","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-additional-files-directives/-s-o-m-e_-f-i-l-e_-d-i-r-e-c-t-i-v-e.html","searchKeys":["SOME_FILE_DIRECTIVE","val SOME_FILE_DIRECTIVE: SimpleDirective","com.javiersc.kotlin.compiler.test.services.AdditionalFilesDirectives.SOME_FILE_DIRECTIVE"]},{"name":"val classpathConfigurator: ClasspathConfigurator","description":"com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.classpathConfigurator","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-meta-runtime-classpath-provider/classpath-configurator.html","searchKeys":["classpathConfigurator","val classpathConfigurator: ClasspathConfigurator","com.javiersc.kotlin.compiler.test.services.MetaRuntimeClasspathProvider.classpathConfigurator"]},{"name":"val jarFiles: List<File>","description":"com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator.jarFiles","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-classpath-configurator/jar-files.html","searchKeys":["jarFiles","val jarFiles: List<File>","com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator.jarFiles"]},{"name":"val jarPaths: List<String>","description":"com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator.jarPaths","location":"kotlin-compiler-test-extensions/com.javiersc.kotlin.compiler.test.services/-classpath-configurator/jar-paths.html","searchKeys":["jarPaths","val jarPaths: List<String>","com.javiersc.kotlin.compiler.test.services.ClasspathConfigurator.jarPaths"]},{"name":"AnnotationClass","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.AnnotationClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-annotation-class/index.html","searchKeys":["AnnotationClass","AnnotationClass","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.AnnotationClass"]},{"name":"Class","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Class","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-class/index.html","searchKeys":["Class","Class","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Class"]},{"name":"CompanionObject","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.CompanionObject","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-companion-object/index.html","searchKeys":["CompanionObject","CompanionObject","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.CompanionObject"]},{"name":"DataClass","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.DataClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-data-class/index.html","searchKeys":["DataClass","DataClass","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.DataClass"]},{"name":"DataObject","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.DataObject","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-data-object/index.html","searchKeys":["DataObject","DataObject","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.DataObject"]},{"name":"EnumClass","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.EnumClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-enum-class/index.html","searchKeys":["EnumClass","EnumClass","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.EnumClass"]},{"name":"EnumEntry","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.EnumEntry","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-enum-entry/index.html","searchKeys":["EnumEntry","EnumEntry","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.EnumEntry"]},{"name":"ExpectAnnotationClass","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ExpectAnnotationClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-expect-annotation-class/index.html","searchKeys":["ExpectAnnotationClass","ExpectAnnotationClass","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ExpectAnnotationClass"]},{"name":"ExpectClass","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ExpectClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-expect-class/index.html","searchKeys":["ExpectClass","ExpectClass","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ExpectClass"]},{"name":"ExpectInterface","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ExpectInterface","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-expect-interface/index.html","searchKeys":["ExpectInterface","ExpectInterface","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ExpectInterface"]},{"name":"FunInterface","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.FunInterface","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-fun-interface/index.html","searchKeys":["FunInterface","FunInterface","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.FunInterface"]},{"name":"InnerClass","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.InnerClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-inner-class/index.html","searchKeys":["InnerClass","InnerClass","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.InnerClass"]},{"name":"Interface","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Interface","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-interface/index.html","searchKeys":["Interface","Interface","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Interface"]},{"name":"Object","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Object","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-object/index.html","searchKeys":["Object","Object","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Object"]},{"name":"ValueClass","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ValueClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-value-class/index.html","searchKeys":["ValueClass","ValueClass","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.ValueClass"]},{"name":"abstract val lookupTag: ConeClassifierLookupTag","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.lookupTag","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/lookup-tag.html","searchKeys":["lookupTag","abstract val lookupTag: ConeClassifierLookupTag","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.lookupTag"]},{"name":"abstract val type: ConeKotlinType","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.type","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/type.html","searchKeys":["type","abstract val type: ConeKotlinType","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.type"]},{"name":"constructor(type: ConeClassLikeType)","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.ClassLike","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-class-like/-class-like.html","searchKeys":["ClassLike","constructor(type: ConeClassLikeType)","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.ClassLike"]},{"name":"constructor(type: ConeTypeParameterType)","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter.TypeParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-type-parameter/-type-parameter.html","searchKeys":["TypeParameter","constructor(type: ConeTypeParameterType)","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter.TypeParameter"]},{"name":"data class ClassLike(val type: ConeClassLikeType) : ConeNode","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-class-like/index.html","searchKeys":["ClassLike","data class ClassLike(val type: ConeClassLikeType) : ConeNode","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike"]},{"name":"data class TypeParameter(val type: ConeTypeParameterType) : ConeNode","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-type-parameter/index.html","searchKeys":["TypeParameter","data class TypeParameter(val type: ConeTypeParameterType) : ConeNode","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter"]},{"name":"enum IrClassExhaustiveKind : Enum<IrClassExhaustiveKind> ","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/index.html","searchKeys":["IrClassExhaustiveKind","enum IrClassExhaustiveKind : Enum<IrClassExhaustiveKind> ","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind"]},{"name":"fun ConeKotlinType.toTreeNode(): ConeKotlinTypeTreeNode","description":"com.javiersc.kotlin.compiler.extensions.fir.toTreeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-tree-node.html","searchKeys":["toTreeNode","fun ConeKotlinType.toTreeNode(): ConeKotlinTypeTreeNode","com.javiersc.kotlin.compiler.extensions.fir.toTreeNode"]},{"name":"fun FirElement.toFirTreeNode(): FirTreeNode","description":"com.javiersc.kotlin.compiler.extensions.fir.toFirTreeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-fir-tree-node.html","searchKeys":["toFirTreeNode","fun FirElement.toFirTreeNode(): FirTreeNode","com.javiersc.kotlin.compiler.extensions.fir.toFirTreeNode"]},{"name":"fun IrElement.toIrTreeNode(): IrTreeNode","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrTreeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-tree-node.html","searchKeys":["toIrTreeNode","fun IrElement.toIrTreeNode(): IrTreeNode","com.javiersc.kotlin.compiler.extensions.ir.toIrTreeNode"]},{"name":"fun valueOf(value: String): IrClassExhaustiveKind","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.valueOf","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): IrClassExhaustiveKind","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.valueOf"]},{"name":"fun values(): Array<IrClassExhaustiveKind>","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.values","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/values.html","searchKeys":["values","fun values(): Array<IrClassExhaustiveKind>","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.values"]},{"name":"inline fun <O : FirBasedSymbol<*>> FirBasedSymbol<*>.asFirSymbol(): O","description":"com.javiersc.kotlin.compiler.extensions.fir.asFirSymbol","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/as-fir-symbol.html","searchKeys":["asFirSymbol","inline fun <O : FirBasedSymbol<*>> FirBasedSymbol<*>.asFirSymbol(): O","com.javiersc.kotlin.compiler.extensions.fir.asFirSymbol"]},{"name":"inline fun <O : FirBasedSymbol<*>> FirBasedSymbol<*>.asFirSymbolOrNull(): O?","description":"com.javiersc.kotlin.compiler.extensions.fir.asFirSymbolOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/as-fir-symbol-or-null.html","searchKeys":["asFirSymbolOrNull","inline fun <O : FirBasedSymbol<*>> FirBasedSymbol<*>.asFirSymbolOrNull(): O?","com.javiersc.kotlin.compiler.extensions.fir.asFirSymbolOrNull"]},{"name":"inline fun <O : FirElement> FirElement.asFir(): O","description":"com.javiersc.kotlin.compiler.extensions.fir.asFir","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/as-fir.html","searchKeys":["asFir","inline fun <O : FirElement> FirElement.asFir(): O","com.javiersc.kotlin.compiler.extensions.fir.asFir"]},{"name":"inline fun <O : FirElement> FirElement.asFirOrNull(): O?","description":"com.javiersc.kotlin.compiler.extensions.fir.asFirOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/as-fir-or-null.html","searchKeys":["asFirOrNull","inline fun <O : FirElement> FirElement.asFirOrNull(): O?","com.javiersc.kotlin.compiler.extensions.fir.asFirOrNull"]},{"name":"inline fun <O : IrElement> IrElement.asIr(): O","description":"com.javiersc.kotlin.compiler.extensions.ir.asIr","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/as-ir.html","searchKeys":["asIr","inline fun <O : IrElement> IrElement.asIr(): O","com.javiersc.kotlin.compiler.extensions.ir.asIr"]},{"name":"inline fun <O : IrElement> IrElement?.asIrOrNull(): O?","description":"com.javiersc.kotlin.compiler.extensions.ir.asIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/as-ir-or-null.html","searchKeys":["asIrOrNull","inline fun <O : IrElement> IrElement?.asIrOrNull(): O?","com.javiersc.kotlin.compiler.extensions.ir.asIrOrNull"]},{"name":"inline fun <O : IrType> IrType.asIr(): O","description":"com.javiersc.kotlin.compiler.extensions.ir.asIr","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/as-ir.html","searchKeys":["asIr","inline fun <O : IrType> IrType.asIr(): O","com.javiersc.kotlin.compiler.extensions.ir.asIr"]},{"name":"inline fun <O : IrType> IrType?.asIrOrNull(): O?","description":"com.javiersc.kotlin.compiler.extensions.ir.asIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/as-ir-or-null.html","searchKeys":["asIrOrNull","inline fun <O : IrType> IrType?.asIrOrNull(): O?","com.javiersc.kotlin.compiler.extensions.ir.asIrOrNull"]},{"name":"inline fun <T : Annotation> IrAnnotationContainer.hasAnnotation(): Boolean","description":"com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/has-annotation.html","searchKeys":["hasAnnotation","inline fun <T : Annotation> IrAnnotationContainer.hasAnnotation(): Boolean","com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation"]},{"name":"inline fun <T : Annotation> IrElement.hasAnnotation(): Boolean","description":"com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/has-annotation.html","searchKeys":["hasAnnotation","inline fun <T : Annotation> IrElement.hasAnnotation(): Boolean","com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation"]},{"name":"inline fun <T : Annotation> IrFunctionAccessExpression.hasAnnotation(): Boolean","description":"com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/has-annotation.html","searchKeys":["hasAnnotation","inline fun <T : Annotation> IrFunctionAccessExpression.hasAnnotation(): Boolean","com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation"]},{"name":"inline fun <T : Enum<T>> IrClass.enumEntry(enum: T): IrEnumEntry?","description":"com.javiersc.kotlin.compiler.extensions.ir.enumEntry","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/enum-entry.html","searchKeys":["enumEntry","inline fun <T : Enum<T>> IrClass.enumEntry(enum: T): IrEnumEntry?","com.javiersc.kotlin.compiler.extensions.ir.enumEntry"]},{"name":"inline fun <T : Enum<T>> createFirEnumEntryDeserializedAccessExpression(enum: T): FirEnumEntryDeserializedAccessExpression","description":"com.javiersc.kotlin.compiler.extensions.fir.createFirEnumEntryDeserializedAccessExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/create-fir-enum-entry-deserialized-access-expression.html","searchKeys":["createFirEnumEntryDeserializedAccessExpression","inline fun <T : Enum<T>> createFirEnumEntryDeserializedAccessExpression(enum: T): FirEnumEntryDeserializedAccessExpression","com.javiersc.kotlin.compiler.extensions.fir.createFirEnumEntryDeserializedAccessExpression"]},{"name":"inline fun <T : IrElement> IrTreeNode.filterIrIsInstance(): List<T>","description":"com.javiersc.kotlin.compiler.extensions.ir.filterIrIsInstance","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/filter-ir-is-instance.html","searchKeys":["filterIrIsInstance","inline fun <T : IrElement> IrTreeNode.filterIrIsInstance(): List<T>","com.javiersc.kotlin.compiler.extensions.ir.filterIrIsInstance"]},{"name":"inline fun <T : IrElement> IrTreeNode.firstIrOrNull(): T?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-or-null.html","searchKeys":["firstIrOrNull","inline fun <T : IrElement> IrTreeNode.firstIrOrNull(): T?","com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull"]},{"name":"inline fun <T : IrElement> IrTreeNode.firstIrOrNull(predicate: (T) -> Boolean): T?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-or-null.html","searchKeys":["firstIrOrNull","inline fun <T : IrElement> IrTreeNode.firstIrOrNull(predicate: (T) -> Boolean): T?","com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull"]},{"name":"inline fun <T : IrElement> Iterable<IrTreeNode>.filterIrIsInstance(): List<T>","description":"com.javiersc.kotlin.compiler.extensions.ir.filterIrIsInstance","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/filter-ir-is-instance.html","searchKeys":["filterIrIsInstance","inline fun <T : IrElement> Iterable<IrTreeNode>.filterIrIsInstance(): List<T>","com.javiersc.kotlin.compiler.extensions.ir.filterIrIsInstance"]},{"name":"inline fun <T : IrElement> Iterable<IrTreeNode>.firstIrOrNull(): T?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-or-null.html","searchKeys":["firstIrOrNull","inline fun <T : IrElement> Iterable<IrTreeNode>.firstIrOrNull(): T?","com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull"]},{"name":"inline fun <T : IrElement> Iterable<IrTreeNode>.firstIrOrNull(predicate: (T) -> Boolean): T?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-or-null.html","searchKeys":["firstIrOrNull","inline fun <T : IrElement> Iterable<IrTreeNode>.firstIrOrNull(predicate: (T) -> Boolean): T?","com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull"]},{"name":"inline fun <T : IrElement> Sequence<IrTreeNode>.filterIrIsInstance(): Sequence<T>","description":"com.javiersc.kotlin.compiler.extensions.ir.filterIrIsInstance","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/filter-ir-is-instance.html","searchKeys":["filterIrIsInstance","inline fun <T : IrElement> Sequence<IrTreeNode>.filterIrIsInstance(): Sequence<T>","com.javiersc.kotlin.compiler.extensions.ir.filterIrIsInstance"]},{"name":"inline fun <T : IrElement> Sequence<IrTreeNode>.firstIrOrNull(): T?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-or-null.html","searchKeys":["firstIrOrNull","inline fun <T : IrElement> Sequence<IrTreeNode>.firstIrOrNull(): T?","com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull"]},{"name":"inline fun <T : IrElement> Sequence<IrTreeNode>.firstIrOrNull(predicate: (T) -> Boolean): T?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-or-null.html","searchKeys":["firstIrOrNull","inline fun <T : IrElement> Sequence<IrTreeNode>.firstIrOrNull(predicate: (T) -> Boolean): T?","com.javiersc.kotlin.compiler.extensions.ir.firstIrOrNull"]},{"name":"inline fun <T> FirSession.coneKotlinType(vararg typeArguments: ConeTypeProjection): ConeKotlinType","description":"com.javiersc.kotlin.compiler.extensions.fir.coneKotlinType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/cone-kotlin-type.html","searchKeys":["coneKotlinType","inline fun <T> FirSession.coneKotlinType(vararg typeArguments: ConeTypeProjection): ConeKotlinType","com.javiersc.kotlin.compiler.extensions.fir.coneKotlinType"]},{"name":"inline fun <T> IrPluginContext.irType(): IrType","description":"com.javiersc.kotlin.compiler.extensions.ir.irType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/ir-type.html","searchKeys":["irType","inline fun <T> IrPluginContext.irType(): IrType","com.javiersc.kotlin.compiler.extensions.ir.irType"]},{"name":"inline fun <T> callableId(): CallableId","description":"com.javiersc.kotlin.compiler.extensions.common.callableId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/callable-id.html","searchKeys":["callableId","inline fun <T> callableId(): CallableId","com.javiersc.kotlin.compiler.extensions.common.callableId"]},{"name":"inline fun <T> classId(): ClassId","description":"com.javiersc.kotlin.compiler.extensions.common.classId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/class-id.html","searchKeys":["classId","inline fun <T> classId(): ClassId","com.javiersc.kotlin.compiler.extensions.common.classId"]},{"name":"inline fun <T> createFirLiteralExpression(kind: ConstantValueKind, value: T, source: KtSourceElement? = null, annotations: MutableList<FirAnnotation> = mutableListOf(), setType: Boolean = true): FirLiteralExpression","description":"com.javiersc.kotlin.compiler.extensions.fir.createFirLiteralExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/create-fir-literal-expression.html","searchKeys":["createFirLiteralExpression","inline fun <T> createFirLiteralExpression(kind: ConstantValueKind, value: T, source: KtSourceElement? = null, annotations: MutableList<FirAnnotation> = mutableListOf(), setType: Boolean = true): FirLiteralExpression","com.javiersc.kotlin.compiler.extensions.fir.createFirLiteralExpression"]},{"name":"inline fun <T> fqName(): FqName","description":"com.javiersc.kotlin.compiler.extensions.common.fqName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/fq-name.html","searchKeys":["fqName","inline fun <T> fqName(): FqName","com.javiersc.kotlin.compiler.extensions.common.fqName"]},{"name":"inline fun <T> packageFqName(): FqName","description":"com.javiersc.kotlin.compiler.extensions.common.packageFqName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/package-fq-name.html","searchKeys":["packageFqName","inline fun <T> packageFqName(): FqName","com.javiersc.kotlin.compiler.extensions.common.packageFqName"]},{"name":"inline fun ClassId.toCallableId(): CallableId","description":"com.javiersc.kotlin.compiler.extensions.common.toCallableId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-callable-id.html","searchKeys":["toCallableId","inline fun ClassId.toCallableId(): CallableId","com.javiersc.kotlin.compiler.extensions.common.toCallableId"]},{"name":"inline fun ClassId.toConeType(vararg typeArguments: ConeTypeProjection): ConeClassLikeType","description":"com.javiersc.kotlin.compiler.extensions.fir.toConeType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-cone-type.html","searchKeys":["toConeType","inline fun ClassId.toConeType(vararg typeArguments: ConeTypeProjection): ConeClassLikeType","com.javiersc.kotlin.compiler.extensions.fir.toConeType"]},{"name":"inline fun ClassId.toFirTypeRef(vararg typeArguments: ConeTypeProjection): FirTypeRef","description":"com.javiersc.kotlin.compiler.extensions.fir.toFirTypeRef","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-fir-type-ref.html","searchKeys":["toFirTypeRef","inline fun ClassId.toFirTypeRef(vararg typeArguments: ConeTypeProjection): FirTypeRef","com.javiersc.kotlin.compiler.extensions.fir.toFirTypeRef"]},{"name":"inline fun ConeKotlinType.toValueParameter(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter.html","searchKeys":["toValueParameter","inline fun ConeKotlinType.toValueParameter(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","com.javiersc.kotlin.compiler.extensions.fir.toValueParameter"]},{"name":"inline fun ConeKotlinType.toValueParameter(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter.html","searchKeys":["toValueParameter","inline fun ConeKotlinType.toValueParameter(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","com.javiersc.kotlin.compiler.extensions.fir.toValueParameter"]},{"name":"inline fun ConeTypeProjection.toFirTypeParameter(session: FirSession, key: GeneratedDeclarationKey, containingDeclarationSymbol: FirBasedSymbol<*>, isReified: Boolean = false, variance: Variance = Variance.INVARIANT, name: Name = this.type?.toRegularClassSymbol(session)?.name ?: Name.special(\"<anonymous>\")): FirTypeParameterRef","description":"com.javiersc.kotlin.compiler.extensions.fir.toFirTypeParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-fir-type-parameter.html","searchKeys":["toFirTypeParameter","inline fun ConeTypeProjection.toFirTypeParameter(session: FirSession, key: GeneratedDeclarationKey, containingDeclarationSymbol: FirBasedSymbol<*>, isReified: Boolean = false, variance: Variance = Variance.INVARIANT, name: Name = this.type?.toRegularClassSymbol(session)?.name ?: Name.special(\"<anonymous>\")): FirTypeParameterRef","com.javiersc.kotlin.compiler.extensions.fir.toFirTypeParameter"]},{"name":"inline fun ConeTypeProjection.toFirTypeParameter(session: FirSession, origin: FirDeclarationOrigin, containingDeclarationSymbol: FirBasedSymbol<*>, isReified: Boolean = false, variance: Variance = Variance.INVARIANT, name: Name = this.type?.toRegularClassSymbol(session)?.name ?: Name.special(\"<anonymous>\")): FirTypeParameterRef","description":"com.javiersc.kotlin.compiler.extensions.fir.toFirTypeParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-fir-type-parameter.html","searchKeys":["toFirTypeParameter","inline fun ConeTypeProjection.toFirTypeParameter(session: FirSession, origin: FirDeclarationOrigin, containingDeclarationSymbol: FirBasedSymbol<*>, isReified: Boolean = false, variance: Variance = Variance.INVARIANT, name: Name = this.type?.toRegularClassSymbol(session)?.name ?: Name.special(\"<anonymous>\")): FirTypeParameterRef","com.javiersc.kotlin.compiler.extensions.fir.toFirTypeParameter"]},{"name":"inline fun FirBasedSymbol<*>.isFunction(): Boolean","description":"com.javiersc.kotlin.compiler.extensions.fir.isFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/is-function.html","searchKeys":["isFunction","inline fun FirBasedSymbol<*>.isFunction(): Boolean","com.javiersc.kotlin.compiler.extensions.fir.isFunction"]},{"name":"inline fun FirBasedSymbol<*>.isProperty(): Boolean","description":"com.javiersc.kotlin.compiler.extensions.fir.isProperty","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/is-property.html","searchKeys":["isProperty","inline fun FirBasedSymbol<*>.isProperty(): Boolean","com.javiersc.kotlin.compiler.extensions.fir.isProperty"]},{"name":"inline fun FirBasedSymbol<*>.valueParameters(session: FirSession): List<FirValueParameter>","description":"com.javiersc.kotlin.compiler.extensions.fir.valueParameters","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/value-parameters.html","searchKeys":["valueParameters","inline fun FirBasedSymbol<*>.valueParameters(session: FirSession): List<FirValueParameter>","com.javiersc.kotlin.compiler.extensions.fir.valueParameters"]},{"name":"inline fun FirClassLikeSymbol<*>.toFirTypeRef(): FirTypeRef","description":"com.javiersc.kotlin.compiler.extensions.fir.toFirTypeRef","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-fir-type-ref.html","searchKeys":["toFirTypeRef","inline fun FirClassLikeSymbol<*>.toFirTypeRef(): FirTypeRef","com.javiersc.kotlin.compiler.extensions.fir.toFirTypeRef"]},{"name":"inline fun FirClassSymbol<*>.toPrimaryConstructor(session: FirSession, key: GeneratedDeclarationKey, block: FirPrimaryConstructorBuilder.(FirClassSymbol<*>) -> Unit = {}): FirConstructor","description":"com.javiersc.kotlin.compiler.extensions.fir.toPrimaryConstructor","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-primary-constructor.html","searchKeys":["toPrimaryConstructor","inline fun FirClassSymbol<*>.toPrimaryConstructor(session: FirSession, key: GeneratedDeclarationKey, block: FirPrimaryConstructorBuilder.(FirClassSymbol<*>) -> Unit = {}): FirConstructor","com.javiersc.kotlin.compiler.extensions.fir.toPrimaryConstructor"]},{"name":"inline fun FirClassSymbol<*>.toPrimaryConstructor(session: FirSession, origin: FirDeclarationOrigin, block: FirPrimaryConstructorBuilder.(FirClassSymbol<*>) -> Unit = {}): FirConstructor","description":"com.javiersc.kotlin.compiler.extensions.fir.toPrimaryConstructor","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-primary-constructor.html","searchKeys":["toPrimaryConstructor","inline fun FirClassSymbol<*>.toPrimaryConstructor(session: FirSession, origin: FirDeclarationOrigin, block: FirPrimaryConstructorBuilder.(FirClassSymbol<*>) -> Unit = {}): FirConstructor","com.javiersc.kotlin.compiler.extensions.fir.toPrimaryConstructor"]},{"name":"inline fun FirContextReceiver.toValueParameter(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter.html","searchKeys":["toValueParameter","inline fun FirContextReceiver.toValueParameter(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter","com.javiersc.kotlin.compiler.extensions.fir.toValueParameter"]},{"name":"inline fun FirContextReceiver.toValueParameter(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter.html","searchKeys":["toValueParameter","inline fun FirContextReceiver.toValueParameter(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter","com.javiersc.kotlin.compiler.extensions.fir.toValueParameter"]},{"name":"inline fun FirContextReceiver.toValueParameterOrNull(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter?","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter-or-null.html","searchKeys":["toValueParameterOrNull","inline fun FirContextReceiver.toValueParameterOrNull(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter?","com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull"]},{"name":"inline fun FirContextReceiver.toValueParameterOrNull(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter?","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter-or-null.html","searchKeys":["toValueParameterOrNull","inline fun FirContextReceiver.toValueParameterOrNull(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): FirValueParameter?","com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull"]},{"name":"inline fun FirFunctionSymbol<*>.contextReceiversToValueParameters(session: FirSession, key: GeneratedDeclarationKey, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): List<FirValueParameter>","description":"com.javiersc.kotlin.compiler.extensions.fir.contextReceiversToValueParameters","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/context-receivers-to-value-parameters.html","searchKeys":["contextReceiversToValueParameters","inline fun FirFunctionSymbol<*>.contextReceiversToValueParameters(session: FirSession, key: GeneratedDeclarationKey, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): List<FirValueParameter>","com.javiersc.kotlin.compiler.extensions.fir.contextReceiversToValueParameters"]},{"name":"inline fun FirFunctionSymbol<*>.contextReceiversToValueParameters(session: FirSession, origin: FirDeclarationOrigin, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): List<FirValueParameter>","description":"com.javiersc.kotlin.compiler.extensions.fir.contextReceiversToValueParameters","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/context-receivers-to-value-parameters.html","searchKeys":["contextReceiversToValueParameters","inline fun FirFunctionSymbol<*>.contextReceiversToValueParameters(session: FirSession, origin: FirDeclarationOrigin, crossinline block: FirValueParameterBuilder.(FirContextReceiver) -> Unit = {}): List<FirValueParameter>","com.javiersc.kotlin.compiler.extensions.fir.contextReceiversToValueParameters"]},{"name":"inline fun FirSession.createFirAnonymousFunction(origin: FirDeclarationOrigin, returnTypeRef: FirTypeRef, symbol: FirAnonymousFunctionSymbol = FirAnonymousFunctionSymbol(), isLambda: Boolean = false, hasExplicitParameterList: Boolean = false, builder: FirAnonymousFunctionBuilder.() -> Unit = {}): FirAnonymousFunction","description":"com.javiersc.kotlin.compiler.extensions.fir.createFirAnonymousFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/create-fir-anonymous-function.html","searchKeys":["createFirAnonymousFunction","inline fun FirSession.createFirAnonymousFunction(origin: FirDeclarationOrigin, returnTypeRef: FirTypeRef, symbol: FirAnonymousFunctionSymbol = FirAnonymousFunctionSymbol(), isLambda: Boolean = false, hasExplicitParameterList: Boolean = false, builder: FirAnonymousFunctionBuilder.() -> Unit = {}): FirAnonymousFunction","com.javiersc.kotlin.compiler.extensions.fir.createFirAnonymousFunction"]},{"name":"inline fun FirSession.isSubtypeOf(subType: ConeKotlinType, superType: ConeKotlinType): Boolean","description":"com.javiersc.kotlin.compiler.extensions.fir.isSubtypeOf","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/is-subtype-of.html","searchKeys":["isSubtypeOf","inline fun FirSession.isSubtypeOf(subType: ConeKotlinType, superType: ConeKotlinType): Boolean","com.javiersc.kotlin.compiler.extensions.fir.isSubtypeOf"]},{"name":"inline fun FirSession.nothingFirAnonymousFunctionExpression(key: GeneratedDeclarationKey): FirAnonymousFunctionExpression","description":"com.javiersc.kotlin.compiler.extensions.fir.nothingFirAnonymousFunctionExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/nothing-fir-anonymous-function-expression.html","searchKeys":["nothingFirAnonymousFunctionExpression","inline fun FirSession.nothingFirAnonymousFunctionExpression(key: GeneratedDeclarationKey): FirAnonymousFunctionExpression","com.javiersc.kotlin.compiler.extensions.fir.nothingFirAnonymousFunctionExpression"]},{"name":"inline fun FirSession.nothingFirAnonymousFunctionExpression(origin: FirDeclarationOrigin): FirAnonymousFunctionExpression","description":"com.javiersc.kotlin.compiler.extensions.fir.nothingFirAnonymousFunctionExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/nothing-fir-anonymous-function-expression.html","searchKeys":["nothingFirAnonymousFunctionExpression","inline fun FirSession.nothingFirAnonymousFunctionExpression(origin: FirDeclarationOrigin): FirAnonymousFunctionExpression","com.javiersc.kotlin.compiler.extensions.fir.nothingFirAnonymousFunctionExpression"]},{"name":"inline fun FirSession.nothingFirFunction(key: GeneratedDeclarationKey): FirFunction","description":"com.javiersc.kotlin.compiler.extensions.fir.nothingFirFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/nothing-fir-function.html","searchKeys":["nothingFirFunction","inline fun FirSession.nothingFirFunction(key: GeneratedDeclarationKey): FirFunction","com.javiersc.kotlin.compiler.extensions.fir.nothingFirFunction"]},{"name":"inline fun FirSession.nothingFirFunction(origin: FirDeclarationOrigin): FirFunction","description":"com.javiersc.kotlin.compiler.extensions.fir.nothingFirFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/nothing-fir-function.html","searchKeys":["nothingFirFunction","inline fun FirSession.nothingFirFunction(origin: FirDeclarationOrigin): FirFunction","com.javiersc.kotlin.compiler.extensions.fir.nothingFirFunction"]},{"name":"inline fun FirTreeNode.render(): String","description":"com.javiersc.kotlin.compiler.extensions.fir.render","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/render.html","searchKeys":["render","inline fun FirTreeNode.render(): String","com.javiersc.kotlin.compiler.extensions.fir.render"]},{"name":"inline fun FirTreeNode.renderWithType(): String","description":"com.javiersc.kotlin.compiler.extensions.fir.renderWithType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/render-with-type.html","searchKeys":["renderWithType","inline fun FirTreeNode.renderWithType(): String","com.javiersc.kotlin.compiler.extensions.fir.renderWithType"]},{"name":"inline fun FirTypeRef.toClassId(session: FirSession): ClassId","description":"com.javiersc.kotlin.compiler.extensions.fir.toClassId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-class-id.html","searchKeys":["toClassId","inline fun FirTypeRef.toClassId(session: FirSession): ClassId","com.javiersc.kotlin.compiler.extensions.fir.toClassId"]},{"name":"inline fun FirTypeRef.toClassIdOrNull(session: FirSession): ClassId?","description":"com.javiersc.kotlin.compiler.extensions.fir.toClassIdOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-class-id-or-null.html","searchKeys":["toClassIdOrNull","inline fun FirTypeRef.toClassIdOrNull(session: FirSession): ClassId?","com.javiersc.kotlin.compiler.extensions.fir.toClassIdOrNull"]},{"name":"inline fun FirTypeRef.toFirAnnotation(argumentMapping: FirAnnotationArgumentMapping = FirEmptyAnnotationArgumentMapping, builder: FirAnnotationBuilder.() -> Unit = {}): FirAnnotation","description":"com.javiersc.kotlin.compiler.extensions.fir.toFirAnnotation","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-fir-annotation.html","searchKeys":["toFirAnnotation","inline fun FirTypeRef.toFirAnnotation(argumentMapping: FirAnnotationArgumentMapping = FirEmptyAnnotationArgumentMapping, builder: FirAnnotationBuilder.() -> Unit = {}): FirAnnotation","com.javiersc.kotlin.compiler.extensions.fir.toFirAnnotation"]},{"name":"inline fun FirTypeRef.toValueParameter(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter.html","searchKeys":["toValueParameter","inline fun FirTypeRef.toValueParameter(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","com.javiersc.kotlin.compiler.extensions.fir.toValueParameter"]},{"name":"inline fun FirTypeRef.toValueParameter(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameter","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter.html","searchKeys":["toValueParameter","inline fun FirTypeRef.toValueParameter(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter","com.javiersc.kotlin.compiler.extensions.fir.toValueParameter"]},{"name":"inline fun FirTypeRef.toValueParameterOrNull(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter?","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter-or-null.html","searchKeys":["toValueParameterOrNull","inline fun FirTypeRef.toValueParameterOrNull(session: FirSession, key: GeneratedDeclarationKey, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter?","com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull"]},{"name":"inline fun FirTypeRef.toValueParameterOrNull(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter?","description":"com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/to-value-parameter-or-null.html","searchKeys":["toValueParameterOrNull","inline fun FirTypeRef.toValueParameterOrNull(session: FirSession, origin: FirDeclarationOrigin, containingFunctionSymbol: FirFunctionSymbol<*>, block: FirValueParameterBuilder.(FirTypeRef) -> Unit = {}): FirValueParameter?","com.javiersc.kotlin.compiler.extensions.fir.toValueParameterOrNull"]},{"name":"inline fun FqName.toCallableId(): CallableId","description":"com.javiersc.kotlin.compiler.extensions.common.toCallableId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-callable-id.html","searchKeys":["toCallableId","inline fun FqName.toCallableId(): CallableId","com.javiersc.kotlin.compiler.extensions.common.toCallableId"]},{"name":"inline fun FqName.toClassId(): ClassId","description":"com.javiersc.kotlin.compiler.extensions.common.toClassId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-class-id.html","searchKeys":["toClassId","inline fun FqName.toClassId(): ClassId","com.javiersc.kotlin.compiler.extensions.common.toClassId"]},{"name":"inline fun IrClass.toIrGetObjectValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrClassSymbol = this.symbol, type: IrType = symbol.owner.defaultType): IrGetObjectValue","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrGetObjectValue","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-get-object-value.html","searchKeys":["toIrGetObjectValue","inline fun IrClass.toIrGetObjectValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrClassSymbol = this.symbol, type: IrType = symbol.owner.defaultType): IrGetObjectValue","com.javiersc.kotlin.compiler.extensions.ir.toIrGetObjectValue"]},{"name":"inline fun IrClass.toIrGetValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrValueSymbol = this.thisReceiver?.symbol ?: error(\"${dumpKotlinLike()} has no `thisReceiver`\"), block: IrGetValueImpl.() -> Unit = {}): IrGetValue","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-get-value.html","searchKeys":["toIrGetValue","inline fun IrClass.toIrGetValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrValueSymbol = this.thisReceiver?.symbol ?: error(\"${dumpKotlinLike()} has no `thisReceiver`\"), block: IrGetValueImpl.() -> Unit = {}): IrGetValue","com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue"]},{"name":"inline fun IrConstructor.toIrConstructorCall(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrConstructorSymbol = this.symbol, type: IrType = symbol.owner.returnType, typeArgumentsCount: Int = symbol.owner.typeParameters.size, origin: IrStatementOrigin? = null, source: SourceElement = SourceElement.NO_SOURCE, block: IrFunctionAccessExpression.() -> Unit = {}): IrConstructorCall","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrConstructorCall","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-constructor-call.html","searchKeys":["toIrConstructorCall","inline fun IrConstructor.toIrConstructorCall(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrConstructorSymbol = this.symbol, type: IrType = symbol.owner.returnType, typeArgumentsCount: Int = symbol.owner.typeParameters.size, origin: IrStatementOrigin? = null, source: SourceElement = SourceElement.NO_SOURCE, block: IrFunctionAccessExpression.() -> Unit = {}): IrConstructorCall","com.javiersc.kotlin.compiler.extensions.ir.toIrConstructorCall"]},{"name":"inline fun IrDeclaration.toIrExpression(): IrExpression","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-expression.html","searchKeys":["toIrExpression","inline fun IrDeclaration.toIrExpression(): IrExpression","com.javiersc.kotlin.compiler.extensions.ir.toIrExpression"]},{"name":"inline fun IrDeclaration.toIrFunctionAccessExpression(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrFunctionSymbol = when (this) {\n            is IrFunction -> this.symbol\n            else -> TODO()\n        }, type: IrType = symbol.owner.returnType, typeArgumentsCount: Int = symbol.owner.typeParameters.size, origin: IrStatementOrigin? = null, superQualifierSymbol: IrClassSymbol? = null, source: SourceElement = SourceElement.NO_SOURCE, block: IrFunctionAccessExpression.() -> Unit = {}): IrFunctionAccessExpression","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrFunctionAccessExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-function-access-expression.html","searchKeys":["toIrFunctionAccessExpression","inline fun IrDeclaration.toIrFunctionAccessExpression(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrFunctionSymbol = when (this) {\n            is IrFunction -> this.symbol\n            else -> TODO()\n        }, type: IrType = symbol.owner.returnType, typeArgumentsCount: Int = symbol.owner.typeParameters.size, origin: IrStatementOrigin? = null, superQualifierSymbol: IrClassSymbol? = null, source: SourceElement = SourceElement.NO_SOURCE, block: IrFunctionAccessExpression.() -> Unit = {}): IrFunctionAccessExpression","com.javiersc.kotlin.compiler.extensions.ir.toIrFunctionAccessExpression"]},{"name":"inline fun IrElement.hasAnnotation(annotation: FqName): Boolean","description":"com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/has-annotation.html","searchKeys":["hasAnnotation","inline fun IrElement.hasAnnotation(annotation: FqName): Boolean","com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation"]},{"name":"inline fun IrExpression.toIrConst(irType: IrType = type, startOffset: Int = SYNTHETIC_OFFSET, endOffset: Int = SYNTHETIC_OFFSET): IrConst","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrConst","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-const.html","searchKeys":["toIrConst","inline fun IrExpression.toIrConst(irType: IrType = type, startOffset: Int = SYNTHETIC_OFFSET, endOffset: Int = SYNTHETIC_OFFSET): IrConst","com.javiersc.kotlin.compiler.extensions.ir.toIrConst"]},{"name":"inline fun IrExpression?.toIrConstOrNull(irType: IrType? = this?.type, startOffset: Int = SYNTHETIC_OFFSET, endOffset: Int = SYNTHETIC_OFFSET): IrConst?","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrConstOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-const-or-null.html","searchKeys":["toIrConstOrNull","inline fun IrExpression?.toIrConstOrNull(irType: IrType? = this?.type, startOffset: Int = SYNTHETIC_OFFSET, endOffset: Int = SYNTHETIC_OFFSET): IrConst?","com.javiersc.kotlin.compiler.extensions.ir.toIrConstOrNull"]},{"name":"inline fun IrFunction.copyIrReturn(value: IrExpression): IrReturn","description":"com.javiersc.kotlin.compiler.extensions.ir.copyIrReturn","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/copy-ir-return.html","searchKeys":["copyIrReturn","inline fun IrFunction.copyIrReturn(value: IrExpression): IrReturn","com.javiersc.kotlin.compiler.extensions.ir.copyIrReturn"]},{"name":"inline fun IrFunction.toIrFunctionAccessExpression(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrFunctionSymbol = this.symbol, type: IrType = symbol.owner.returnType, typeArgumentsCount: Int = symbol.owner.typeParameters.size, origin: IrStatementOrigin? = null, superQualifierSymbol: IrClassSymbol? = null, source: SourceElement = SourceElement.NO_SOURCE, block: IrFunctionAccessExpression.() -> Unit = {}): IrFunctionAccessExpression","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrFunctionAccessExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-function-access-expression.html","searchKeys":["toIrFunctionAccessExpression","inline fun IrFunction.toIrFunctionAccessExpression(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrFunctionSymbol = this.symbol, type: IrType = symbol.owner.returnType, typeArgumentsCount: Int = symbol.owner.typeParameters.size, origin: IrStatementOrigin? = null, superQualifierSymbol: IrClassSymbol? = null, source: SourceElement = SourceElement.NO_SOURCE, block: IrFunctionAccessExpression.() -> Unit = {}): IrFunctionAccessExpression","com.javiersc.kotlin.compiler.extensions.ir.toIrFunctionAccessExpression"]},{"name":"inline fun IrFunction.toIrGetValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrValueSymbol = this.dispatchReceiverParameter!!.symbol, type: IrType = symbol.owner.type, origin: IrStatementOrigin? = null, block: IrGetValueImpl.() -> Unit = {}): IrGetValue","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-get-value.html","searchKeys":["toIrGetValue","inline fun IrFunction.toIrGetValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrValueSymbol = this.dispatchReceiverParameter!!.symbol, type: IrType = symbol.owner.type, origin: IrStatementOrigin? = null, block: IrGetValueImpl.() -> Unit = {}): IrGetValue","com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue"]},{"name":"inline fun IrFunctionAccessExpression.hasAnnotation(annotation: FqName): Boolean","description":"com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/has-annotation.html","searchKeys":["hasAnnotation","inline fun IrFunctionAccessExpression.hasAnnotation(annotation: FqName): Boolean","com.javiersc.kotlin.compiler.extensions.ir.hasAnnotation"]},{"name":"inline fun IrPluginContext.createDefaultPropertyAccessor(name: String, builder: IrFunctionBuilder.() -> Unit = {}, function: IrSimpleFunction.() -> Unit = {}): IrSimpleFunction","description":"com.javiersc.kotlin.compiler.extensions.ir.createDefaultPropertyAccessor","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-default-property-accessor.html","searchKeys":["createDefaultPropertyAccessor","inline fun IrPluginContext.createDefaultPropertyAccessor(name: String, builder: IrFunctionBuilder.() -> Unit = {}, function: IrSimpleFunction.() -> Unit = {}): IrSimpleFunction","com.javiersc.kotlin.compiler.extensions.ir.createDefaultPropertyAccessor"]},{"name":"inline fun IrPluginContext.createExpressionBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, expression: IrExpression): IrExpressionBody","description":"com.javiersc.kotlin.compiler.extensions.ir.createExpressionBody","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-expression-body.html","searchKeys":["createExpressionBody","inline fun IrPluginContext.createExpressionBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, expression: IrExpression): IrExpressionBody","com.javiersc.kotlin.compiler.extensions.ir.createExpressionBody"]},{"name":"inline fun IrPluginContext.createGetterIrSimpleFunction(name: Name, builder: IrFunctionBuilder.() -> Unit = {}, function: IrSimpleFunction.() -> Unit = {}): IrSimpleFunction","description":"com.javiersc.kotlin.compiler.extensions.ir.createGetterIrSimpleFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-getter-ir-simple-function.html","searchKeys":["createGetterIrSimpleFunction","inline fun IrPluginContext.createGetterIrSimpleFunction(name: Name, builder: IrFunctionBuilder.() -> Unit = {}, function: IrSimpleFunction.() -> Unit = {}): IrSimpleFunction","com.javiersc.kotlin.compiler.extensions.ir.createGetterIrSimpleFunction"]},{"name":"inline fun IrPluginContext.createIrBlockBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrBlockBody","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrBlockBody","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-block-body.html","searchKeys":["createIrBlockBody","inline fun IrPluginContext.createIrBlockBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET): IrBlockBody","com.javiersc.kotlin.compiler.extensions.ir.createIrBlockBody"]},{"name":"inline fun IrPluginContext.createIrBlockBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, initializer: IrBlockBody.() -> Unit): IrBlockBody","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrBlockBody","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-block-body.html","searchKeys":["createIrBlockBody","inline fun IrPluginContext.createIrBlockBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, initializer: IrBlockBody.() -> Unit): IrBlockBody","com.javiersc.kotlin.compiler.extensions.ir.createIrBlockBody"]},{"name":"inline fun IrPluginContext.createIrBlockBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, statements: List<IrStatement>): IrBlockBody","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrBlockBody","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-block-body.html","searchKeys":["createIrBlockBody","inline fun IrPluginContext.createIrBlockBody(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, statements: List<IrStatement>): IrBlockBody","com.javiersc.kotlin.compiler.extensions.ir.createIrBlockBody"]},{"name":"inline fun IrPluginContext.createIrField(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, name: Name, visibility: DescriptorVisibility = DescriptorVisibilities.LOCAL, symbol: IrFieldSymbol = IrFieldSymbolImpl(), type: IrType, isFinal: Boolean = true, isStatic: Boolean = false, isExternal: Boolean = false, block: IrField.() -> Unit = {}): IrField","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrField","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-field.html","searchKeys":["createIrField","inline fun IrPluginContext.createIrField(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, name: Name, visibility: DescriptorVisibility = DescriptorVisibilities.LOCAL, symbol: IrFieldSymbol = IrFieldSymbolImpl(), type: IrType, isFinal: Boolean = true, isStatic: Boolean = false, isExternal: Boolean = false, block: IrField.() -> Unit = {}): IrField","com.javiersc.kotlin.compiler.extensions.ir.createIrField"]},{"name":"inline fun IrPluginContext.createLambdaIrSimpleFunction(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.LOCAL_FUNCTION_FOR_LAMBDA, name: Name = SpecialNames.ANONYMOUS, visibility: DescriptorVisibility = DescriptorVisibilities.LOCAL, isInline: Boolean = false, isExpect: Boolean = false, returnType: IrType = irBuiltIns.nothingType, modality: Modality = Modality.FINAL, symbol: IrSimpleFunctionSymbol = IrSimpleFunctionSymbolImpl(), isTailrec: Boolean = false, isSuspend: Boolean = false, isOperator: Boolean = false, isInfix: Boolean = false, isExternal: Boolean = false, containerSource: DeserializedContainerSource? = null, isFakeOverride: Boolean = origin == IrDeclarationOrigin.FAKE_OVERRIDE, block: IrSimpleFunction.() -> Unit = {}): IrSimpleFunction","description":"com.javiersc.kotlin.compiler.extensions.ir.createLambdaIrSimpleFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-lambda-ir-simple-function.html","searchKeys":["createLambdaIrSimpleFunction","inline fun IrPluginContext.createLambdaIrSimpleFunction(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.LOCAL_FUNCTION_FOR_LAMBDA, name: Name = SpecialNames.ANONYMOUS, visibility: DescriptorVisibility = DescriptorVisibilities.LOCAL, isInline: Boolean = false, isExpect: Boolean = false, returnType: IrType = irBuiltIns.nothingType, modality: Modality = Modality.FINAL, symbol: IrSimpleFunctionSymbol = IrSimpleFunctionSymbolImpl(), isTailrec: Boolean = false, isSuspend: Boolean = false, isOperator: Boolean = false, isInfix: Boolean = false, isExternal: Boolean = false, containerSource: DeserializedContainerSource? = null, isFakeOverride: Boolean = origin == IrDeclarationOrigin.FAKE_OVERRIDE, block: IrSimpleFunction.() -> Unit = {}): IrSimpleFunction","com.javiersc.kotlin.compiler.extensions.ir.createLambdaIrSimpleFunction"]},{"name":"inline fun IrPluginContext.declarationIrBuilder(element: IrSymbolOwner): DeclarationIrBuilder","description":"com.javiersc.kotlin.compiler.extensions.ir.declarationIrBuilder","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/declaration-ir-builder.html","searchKeys":["declarationIrBuilder","inline fun IrPluginContext.declarationIrBuilder(element: IrSymbolOwner): DeclarationIrBuilder","com.javiersc.kotlin.compiler.extensions.ir.declarationIrBuilder"]},{"name":"inline fun IrPluginContext.declarationIrBuilder(symbol: IrSymbol): DeclarationIrBuilder","description":"com.javiersc.kotlin.compiler.extensions.ir.declarationIrBuilder","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/declaration-ir-builder.html","searchKeys":["declarationIrBuilder","inline fun IrPluginContext.declarationIrBuilder(symbol: IrSymbol): DeclarationIrBuilder","com.javiersc.kotlin.compiler.extensions.ir.declarationIrBuilder"]},{"name":"inline fun IrPluginContext.firstIrClass(classId: ClassId): IrClass","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-class.html","searchKeys":["firstIrClass","inline fun IrPluginContext.firstIrClass(classId: ClassId): IrClass","com.javiersc.kotlin.compiler.extensions.ir.firstIrClass"]},{"name":"inline fun IrPluginContext.firstIrClassOrNull(classId: ClassId): IrClass?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrClassOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-class-or-null.html","searchKeys":["firstIrClassOrNull","inline fun IrPluginContext.firstIrClassOrNull(classId: ClassId): IrClass?","com.javiersc.kotlin.compiler.extensions.ir.firstIrClassOrNull"]},{"name":"inline fun IrPluginContext.firstIrClassSymbol(classId: ClassId): IrClassSymbol","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrClassSymbol","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-class-symbol.html","searchKeys":["firstIrClassSymbol","inline fun IrPluginContext.firstIrClassSymbol(classId: ClassId): IrClassSymbol","com.javiersc.kotlin.compiler.extensions.ir.firstIrClassSymbol"]},{"name":"inline fun IrPluginContext.firstIrClassSymbolOrNull(classId: ClassId): IrClassSymbol?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrClassSymbolOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-class-symbol-or-null.html","searchKeys":["firstIrClassSymbolOrNull","inline fun IrPluginContext.firstIrClassSymbolOrNull(classId: ClassId): IrClassSymbol?","com.javiersc.kotlin.compiler.extensions.ir.firstIrClassSymbolOrNull"]},{"name":"inline fun IrPluginContext.firstIrFunction(callableId: CallableId): IrFunction","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-function.html","searchKeys":["firstIrFunction","inline fun IrPluginContext.firstIrFunction(callableId: CallableId): IrFunction","com.javiersc.kotlin.compiler.extensions.ir.firstIrFunction"]},{"name":"inline fun IrPluginContext.firstIrFunctionOrNull(callableId: CallableId): IrFunction?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrFunctionOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-function-or-null.html","searchKeys":["firstIrFunctionOrNull","inline fun IrPluginContext.firstIrFunctionOrNull(callableId: CallableId): IrFunction?","com.javiersc.kotlin.compiler.extensions.ir.firstIrFunctionOrNull"]},{"name":"inline fun IrPluginContext.firstIrFunctionSymbol(callableId: CallableId): IrFunctionSymbol","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrFunctionSymbol","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-function-symbol.html","searchKeys":["firstIrFunctionSymbol","inline fun IrPluginContext.firstIrFunctionSymbol(callableId: CallableId): IrFunctionSymbol","com.javiersc.kotlin.compiler.extensions.ir.firstIrFunctionSymbol"]},{"name":"inline fun IrPluginContext.firstIrFunctionSymbolOrNull(callableId: CallableId): IrFunctionSymbol?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrFunctionSymbolOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-function-symbol-or-null.html","searchKeys":["firstIrFunctionSymbolOrNull","inline fun IrPluginContext.firstIrFunctionSymbolOrNull(callableId: CallableId): IrFunctionSymbol?","com.javiersc.kotlin.compiler.extensions.ir.firstIrFunctionSymbolOrNull"]},{"name":"inline fun IrPluginContext.firstIrSimpleFunction(callableId: CallableId): IrSimpleFunction","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-simple-function.html","searchKeys":["firstIrSimpleFunction","inline fun IrPluginContext.firstIrSimpleFunction(callableId: CallableId): IrSimpleFunction","com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunction"]},{"name":"inline fun IrPluginContext.firstIrSimpleFunctionOrNull(callableId: CallableId): IrSimpleFunction?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunctionOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-simple-function-or-null.html","searchKeys":["firstIrSimpleFunctionOrNull","inline fun IrPluginContext.firstIrSimpleFunctionOrNull(callableId: CallableId): IrSimpleFunction?","com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunctionOrNull"]},{"name":"inline fun IrPluginContext.firstIrSimpleFunctionSymbol(callableId: CallableId): IrSimpleFunctionSymbol","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunctionSymbol","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-simple-function-symbol.html","searchKeys":["firstIrSimpleFunctionSymbol","inline fun IrPluginContext.firstIrSimpleFunctionSymbol(callableId: CallableId): IrSimpleFunctionSymbol","com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunctionSymbol"]},{"name":"inline fun IrPluginContext.firstIrSimpleFunctionSymbolOrNull(callableId: CallableId): IrSimpleFunctionSymbol?","description":"com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunctionSymbolOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/first-ir-simple-function-symbol-or-null.html","searchKeys":["firstIrSimpleFunctionSymbolOrNull","inline fun IrPluginContext.firstIrSimpleFunctionSymbolOrNull(callableId: CallableId): IrSimpleFunctionSymbol?","com.javiersc.kotlin.compiler.extensions.ir.firstIrSimpleFunctionSymbolOrNull"]},{"name":"inline fun IrSimpleFunction.toIrCall(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrSimpleFunctionSymbol = this.symbol, type: IrType = returnType, typeArgumentsCount: Int = typeParameters.size, origin: IrStatementOrigin? = null, superQualifierSymbol: IrClassSymbol? = null, block: IrCall.() -> Unit = {}): IrCall","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrCall","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-call.html","searchKeys":["toIrCall","inline fun IrSimpleFunction.toIrCall(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, symbol: IrSimpleFunctionSymbol = this.symbol, type: IrType = returnType, typeArgumentsCount: Int = typeParameters.size, origin: IrStatementOrigin? = null, superQualifierSymbol: IrClassSymbol? = null, block: IrCall.() -> Unit = {}): IrCall","com.javiersc.kotlin.compiler.extensions.ir.toIrCall"]},{"name":"inline fun IrSimpleType.toIrTypeProjection(variance: Variance = Variance.INVARIANT): IrTypeProjection","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrTypeProjection","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-type-projection.html","searchKeys":["toIrTypeProjection","inline fun IrSimpleType.toIrTypeProjection(variance: Variance = Variance.INVARIANT): IrTypeProjection","com.javiersc.kotlin.compiler.extensions.ir.toIrTypeProjection"]},{"name":"inline fun IrTreeNode.dump(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.dump","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/dump.html","searchKeys":["dump","inline fun IrTreeNode.dump(): String","com.javiersc.kotlin.compiler.extensions.ir.dump"]},{"name":"inline fun IrTreeNode.dumpKotlinLike(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/dump-kotlin-like.html","searchKeys":["dumpKotlinLike","inline fun IrTreeNode.dumpKotlinLike(): String","com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike"]},{"name":"inline fun IrTreeNode.render(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.render","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/render.html","searchKeys":["render","inline fun IrTreeNode.render(): String","com.javiersc.kotlin.compiler.extensions.ir.render"]},{"name":"inline fun IrType.createIrVariable(name: Name, parent: IrDeclarationParent? = null, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, isVar: Boolean = false, isConst: Boolean = false, isLateinit: Boolean = false, block: IrVariableImpl.() -> Unit = {}): IrVariable","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrVariable","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-variable.html","searchKeys":["createIrVariable","inline fun IrType.createIrVariable(name: Name, parent: IrDeclarationParent? = null, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, isVar: Boolean = false, isConst: Boolean = false, isLateinit: Boolean = false, block: IrVariableImpl.() -> Unit = {}): IrVariable","com.javiersc.kotlin.compiler.extensions.ir.createIrVariable"]},{"name":"inline fun IrType.substituteOrSelf(original: IrTypeParametersContainer, transformed: IrTypeParametersContainer): IrType","description":"com.javiersc.kotlin.compiler.extensions.ir.substituteOrSelf","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/substitute-or-self.html","searchKeys":["substituteOrSelf","inline fun IrType.substituteOrSelf(original: IrTypeParametersContainer, transformed: IrTypeParametersContainer): IrType","com.javiersc.kotlin.compiler.extensions.ir.substituteOrSelf"]},{"name":"inline fun IrType.substituteOrSelf(substitutionMap: Map<IrTypeParameterSymbol, IrType>?): IrType","description":"com.javiersc.kotlin.compiler.extensions.ir.substituteOrSelf","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/substitute-or-self.html","searchKeys":["substituteOrSelf","inline fun IrType.substituteOrSelf(substitutionMap: Map<IrTypeParameterSymbol, IrType>?): IrType","com.javiersc.kotlin.compiler.extensions.ir.substituteOrSelf"]},{"name":"inline fun IrType.toIrGetEnumValue(enumEntry: IrEnumEntry): IrGetEnumValue","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrGetEnumValue","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-get-enum-value.html","searchKeys":["toIrGetEnumValue","inline fun IrType.toIrGetEnumValue(enumEntry: IrEnumEntry): IrGetEnumValue","com.javiersc.kotlin.compiler.extensions.ir.toIrGetEnumValue"]},{"name":"inline fun IrType.toIrTypeProjection(variance: Variance = Variance.INVARIANT): IrTypeProjection","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrTypeProjection","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-type-projection.html","searchKeys":["toIrTypeProjection","inline fun IrType.toIrTypeProjection(variance: Variance = Variance.INVARIANT): IrTypeProjection","com.javiersc.kotlin.compiler.extensions.ir.toIrTypeProjection"]},{"name":"inline fun IrType.toIrTypeProjectionOrNull(variance: Variance = Variance.INVARIANT): IrTypeProjection?","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrTypeProjectionOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-type-projection-or-null.html","searchKeys":["toIrTypeProjectionOrNull","inline fun IrType.toIrTypeProjectionOrNull(variance: Variance = Variance.INVARIANT): IrTypeProjection?","com.javiersc.kotlin.compiler.extensions.ir.toIrTypeProjectionOrNull"]},{"name":"inline fun IrValueParameter.toIrField(pluginContext: IrPluginContext, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, name: Name = this.name, visibility: DescriptorVisibility = DescriptorVisibilities.LOCAL, symbol: IrFieldSymbol = IrFieldSymbolImpl(), type: IrType = this.type, isFinal: Boolean = true, isStatic: Boolean = false, isExternal: Boolean = false, block: IrField.() -> Unit = {}): IrField","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrField","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-field.html","searchKeys":["toIrField","inline fun IrValueParameter.toIrField(pluginContext: IrPluginContext, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, name: Name = this.name, visibility: DescriptorVisibility = DescriptorVisibilities.LOCAL, symbol: IrFieldSymbol = IrFieldSymbolImpl(), type: IrType = this.type, isFinal: Boolean = true, isStatic: Boolean = false, isExternal: Boolean = false, block: IrField.() -> Unit = {}): IrField","com.javiersc.kotlin.compiler.extensions.ir.toIrField"]},{"name":"inline fun IrValueParameter.toIrGetValue(): IrGetValue","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-get-value.html","searchKeys":["toIrGetValue","inline fun IrValueParameter.toIrGetValue(): IrGetValue","com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue"]},{"name":"inline fun IrVariable.toIrGetValue(): IrGetValue","description":"com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/to-ir-get-value.html","searchKeys":["toIrGetValue","inline fun IrVariable.toIrGetValue(): IrGetValue","com.javiersc.kotlin.compiler.extensions.ir.toIrGetValue"]},{"name":"inline fun Iterable<IrElement>.dump(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.dump","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/dump.html","searchKeys":["dump","inline fun Iterable<IrElement>.dump(): String","com.javiersc.kotlin.compiler.extensions.ir.dump"]},{"name":"inline fun Iterable<IrElement>.dumpKotlinLike(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/dump-kotlin-like.html","searchKeys":["dumpKotlinLike","inline fun Iterable<IrElement>.dumpKotlinLike(): String","com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike"]},{"name":"inline fun Iterable<IrType?>.dumpKotlinLike(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/dump-kotlin-like.html","searchKeys":["dumpKotlinLike","inline fun Iterable<IrType?>.dumpKotlinLike(): String","com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike"]},{"name":"inline fun Iterable<IrTypeArgument?>.dumpKotlinLike(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/dump-kotlin-like.html","searchKeys":["dumpKotlinLike","inline fun Iterable<IrTypeArgument?>.dumpKotlinLike(): String","com.javiersc.kotlin.compiler.extensions.ir.dumpKotlinLike"]},{"name":"inline fun KClass<*>.toFqName(): FqName","description":"com.javiersc.kotlin.compiler.extensions.common.toFqName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-fq-name.html","searchKeys":["toFqName","inline fun KClass<*>.toFqName(): FqName","com.javiersc.kotlin.compiler.extensions.common.toFqName"]},{"name":"inline fun KFunction<*>.toName(): Name","description":"com.javiersc.kotlin.compiler.extensions.common.toName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-name.html","searchKeys":["toName","inline fun KFunction<*>.toName(): Name","com.javiersc.kotlin.compiler.extensions.common.toName"]},{"name":"inline fun List<FirElement?>.render(): String","description":"com.javiersc.kotlin.compiler.extensions.fir.render","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/render.html","searchKeys":["render","inline fun List<FirElement?>.render(): String","com.javiersc.kotlin.compiler.extensions.fir.render"]},{"name":"inline fun String.toCallableId(): CallableId","description":"com.javiersc.kotlin.compiler.extensions.common.toCallableId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-callable-id.html","searchKeys":["toCallableId","inline fun String.toCallableId(): CallableId","com.javiersc.kotlin.compiler.extensions.common.toCallableId"]},{"name":"inline fun String.toClassId(): ClassId","description":"com.javiersc.kotlin.compiler.extensions.common.toClassId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-class-id.html","searchKeys":["toClassId","inline fun String.toClassId(): ClassId","com.javiersc.kotlin.compiler.extensions.common.toClassId"]},{"name":"inline fun String.toFqName(): FqName","description":"com.javiersc.kotlin.compiler.extensions.common.toFqName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-fq-name.html","searchKeys":["toFqName","inline fun String.toFqName(): FqName","com.javiersc.kotlin.compiler.extensions.common.toFqName"]},{"name":"inline fun String.toName(): Name","description":"com.javiersc.kotlin.compiler.extensions.common.toName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.common/to-name.html","searchKeys":["toName","inline fun String.toName(): Name","com.javiersc.kotlin.compiler.extensions.common.toName"]},{"name":"inline fun createFirAnnotation(annotationTypeRef: FirTypeRef, argumentMapping: FirAnnotationArgumentMapping = FirEmptyAnnotationArgumentMapping, builder: FirAnnotationBuilder.() -> Unit = {}): FirAnnotation","description":"com.javiersc.kotlin.compiler.extensions.fir.createFirAnnotation","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/create-fir-annotation.html","searchKeys":["createFirAnnotation","inline fun createFirAnnotation(annotationTypeRef: FirTypeRef, argumentMapping: FirAnnotationArgumentMapping = FirEmptyAnnotationArgumentMapping, builder: FirAnnotationBuilder.() -> Unit = {}): FirAnnotation","com.javiersc.kotlin.compiler.extensions.fir.createFirAnnotation"]},{"name":"inline fun createFirAnonymousFunctionExpression(anonymousFunction: FirAnonymousFunction, builder: FirAnonymousFunctionExpressionBuilder.() -> Unit = {}): FirAnonymousFunctionExpression","description":"com.javiersc.kotlin.compiler.extensions.fir.createFirAnonymousFunctionExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/create-fir-anonymous-function-expression.html","searchKeys":["createFirAnonymousFunctionExpression","inline fun createFirAnonymousFunctionExpression(anonymousFunction: FirAnonymousFunction, builder: FirAnonymousFunctionExpressionBuilder.() -> Unit = {}): FirAnonymousFunctionExpression","com.javiersc.kotlin.compiler.extensions.fir.createFirAnonymousFunctionExpression"]},{"name":"inline fun createFirEnumEntryDeserializedAccessExpression(enumEntryName: Name, enumClassId: ClassId): FirEnumEntryDeserializedAccessExpression","description":"com.javiersc.kotlin.compiler.extensions.fir.createFirEnumEntryDeserializedAccessExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/create-fir-enum-entry-deserialized-access-expression.html","searchKeys":["createFirEnumEntryDeserializedAccessExpression","inline fun createFirEnumEntryDeserializedAccessExpression(enumEntryName: Name, enumClassId: ClassId): FirEnumEntryDeserializedAccessExpression","com.javiersc.kotlin.compiler.extensions.fir.createFirEnumEntryDeserializedAccessExpression"]},{"name":"inline fun createFirResolvedTypeRef(type: ConeKotlinType, builder: FirResolvedTypeRefBuilder.() -> Unit = {}): FirResolvedTypeRef","description":"com.javiersc.kotlin.compiler.extensions.fir.createFirResolvedTypeRef","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/create-fir-resolved-type-ref.html","searchKeys":["createFirResolvedTypeRef","inline fun createFirResolvedTypeRef(type: ConeKotlinType, builder: FirResolvedTypeRefBuilder.() -> Unit = {}): FirResolvedTypeRef","com.javiersc.kotlin.compiler.extensions.fir.createFirResolvedTypeRef"]},{"name":"inline fun createIrFunctionExpression(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, type: IrType, function: IrSimpleFunction, origin: IrStatementOrigin): IrFunctionExpression","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrFunctionExpression","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-function-expression.html","searchKeys":["createIrFunctionExpression","inline fun createIrFunctionExpression(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, type: IrType, function: IrSimpleFunction, origin: IrStatementOrigin): IrFunctionExpression","com.javiersc.kotlin.compiler.extensions.ir.createIrFunctionExpression"]},{"name":"inline fun createIrGetValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, type: IrType, symbol: IrValueSymbol, origin: IrStatementOrigin? = null, block: IrGetValueImpl.() -> Unit = {}): IrGetValue","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrGetValue","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-get-value.html","searchKeys":["createIrGetValue","inline fun createIrGetValue(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, type: IrType, symbol: IrValueSymbol, origin: IrStatementOrigin? = null, block: IrGetValueImpl.() -> Unit = {}): IrGetValue","com.javiersc.kotlin.compiler.extensions.ir.createIrGetValue"]},{"name":"inline fun createIrReturn(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, type: IrType, returnTargetSymbol: IrReturnTargetSymbol, value: IrExpression, block: IrReturnImpl.() -> Unit = {}): IrReturn","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrReturn","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-return.html","searchKeys":["createIrReturn","inline fun createIrReturn(startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, type: IrType, returnTargetSymbol: IrReturnTargetSymbol, value: IrExpression, block: IrReturnImpl.() -> Unit = {}): IrReturn","com.javiersc.kotlin.compiler.extensions.ir.createIrReturn"]},{"name":"inline fun createIrVariable(name: Name, type: IrType, parent: IrDeclarationParent? = null, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, isVar: Boolean = false, isConst: Boolean = false, isLateinit: Boolean = false, block: IrVariableImpl.() -> Unit = {}): IrVariable","description":"com.javiersc.kotlin.compiler.extensions.ir.createIrVariable","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/create-ir-variable.html","searchKeys":["createIrVariable","inline fun createIrVariable(name: Name, type: IrType, parent: IrDeclarationParent? = null, startOffset: Int = UNDEFINED_OFFSET, endOffset: Int = UNDEFINED_OFFSET, origin: IrDeclarationOrigin = IrDeclarationOrigin.DEFINED, isVar: Boolean = false, isConst: Boolean = false, isLateinit: Boolean = false, block: IrVariableImpl.() -> Unit = {}): IrVariable","com.javiersc.kotlin.compiler.extensions.ir.createIrVariable"]},{"name":"inline fun from(irClass: IrClass): IrClassExhaustiveKind","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Companion.from","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-companion/from.html","searchKeys":["from","inline fun from(irClass: IrClass): IrClassExhaustiveKind","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Companion.from"]},{"name":"object Companion","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Companion","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/-companion/index.html","searchKeys":["Companion","object Companion","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.Companion"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.toString","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.toString"]},{"name":"open override val lookupTag: ConeClassLikeLookupTag","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.lookupTag","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-class-like/lookup-tag.html","searchKeys":["lookupTag","open override val lookupTag: ConeClassLikeLookupTag","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.lookupTag"]},{"name":"open override val lookupTag: ConeClassifierLookupTag","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter.lookupTag","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-type-parameter/lookup-tag.html","searchKeys":["lookupTag","open override val lookupTag: ConeClassifierLookupTag","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter.lookupTag"]},{"name":"open override val type: ConeClassLikeType","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.type","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-class-like/type.html","searchKeys":["type","open override val type: ConeClassLikeType","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.type"]},{"name":"open override val type: ConeTypeParameterType","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter.type","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-type-parameter/type.html","searchKeys":["type","open override val type: ConeTypeParameterType","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.TypeParameter.type"]},{"name":"sealed class ConeNode","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/index.html","searchKeys":["ConeNode","sealed class ConeNode","com.javiersc.kotlin.compiler.extensions.fir.ConeNode"]},{"name":"typealias ConeKotlinTypeTreeNode = TreeNode<ConeNode>","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeKotlinTypeTreeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-kotlin-type-tree-node/index.html","searchKeys":["ConeKotlinTypeTreeNode","typealias ConeKotlinTypeTreeNode = TreeNode<ConeNode>","com.javiersc.kotlin.compiler.extensions.fir.ConeKotlinTypeTreeNode"]},{"name":"typealias FirTreeNode = TreeNode<FirElement>","description":"com.javiersc.kotlin.compiler.extensions.fir.FirTreeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-fir-tree-node/index.html","searchKeys":["FirTreeNode","typealias FirTreeNode = TreeNode<FirElement>","com.javiersc.kotlin.compiler.extensions.fir.FirTreeNode"]},{"name":"typealias IrTreeNode = TreeNode<IrElement>","description":"com.javiersc.kotlin.compiler.extensions.ir.IrTreeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-tree-node/index.html","searchKeys":["IrTreeNode","typealias IrTreeNode = TreeNode<IrElement>","com.javiersc.kotlin.compiler.extensions.ir.IrTreeNode"]},{"name":"val ConeKotlinType.isTypeParameterType: Boolean","description":"com.javiersc.kotlin.compiler.extensions.fir.isTypeParameterType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/is-type-parameter-type.html","searchKeys":["isTypeParameterType","val ConeKotlinType.isTypeParameterType: Boolean","com.javiersc.kotlin.compiler.extensions.fir.isTypeParameterType"]},{"name":"val ConeKotlinType.treeNode: ConeKotlinTypeTreeNode","description":"com.javiersc.kotlin.compiler.extensions.fir.treeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/tree-node.html","searchKeys":["treeNode","val ConeKotlinType.treeNode: ConeKotlinTypeTreeNode","com.javiersc.kotlin.compiler.extensions.fir.treeNode"]},{"name":"val FirBasedSymbol<*>.coneKotlinType: ConeKotlinType","description":"com.javiersc.kotlin.compiler.extensions.fir.coneKotlinType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/cone-kotlin-type.html","searchKeys":["coneKotlinType","val FirBasedSymbol<*>.coneKotlinType: ConeKotlinType","com.javiersc.kotlin.compiler.extensions.fir.coneKotlinType"]},{"name":"val FirBasedSymbol<*>.coneKotlinTypeOrNull: ConeKotlinType?","description":"com.javiersc.kotlin.compiler.extensions.fir.coneKotlinTypeOrNull","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/cone-kotlin-type-or-null.html","searchKeys":["coneKotlinTypeOrNull","val FirBasedSymbol<*>.coneKotlinTypeOrNull: ConeKotlinType?","com.javiersc.kotlin.compiler.extensions.fir.coneKotlinTypeOrNull"]},{"name":"val FirBasedSymbol<*>.contextReceivers: List<FirContextReceiver>","description":"com.javiersc.kotlin.compiler.extensions.fir.contextReceivers","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/context-receivers.html","searchKeys":["contextReceivers","val FirBasedSymbol<*>.contextReceivers: List<FirContextReceiver>","com.javiersc.kotlin.compiler.extensions.fir.contextReceivers"]},{"name":"val FirBasedSymbol<*>.hasOwner: Boolean","description":"com.javiersc.kotlin.compiler.extensions.fir.hasOwner","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/has-owner.html","searchKeys":["hasOwner","val FirBasedSymbol<*>.hasOwner: Boolean","com.javiersc.kotlin.compiler.extensions.fir.hasOwner"]},{"name":"val FirBasedSymbol<*>.isNested: Boolean","description":"com.javiersc.kotlin.compiler.extensions.fir.isNested","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/is-nested.html","searchKeys":["isNested","val FirBasedSymbol<*>.isNested: Boolean","com.javiersc.kotlin.compiler.extensions.fir.isNested"]},{"name":"val FirBasedSymbol<*>.isTopLevel: Boolean","description":"com.javiersc.kotlin.compiler.extensions.fir.isTopLevel","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/is-top-level.html","searchKeys":["isTopLevel","val FirBasedSymbol<*>.isTopLevel: Boolean","com.javiersc.kotlin.compiler.extensions.fir.isTopLevel"]},{"name":"val FirBasedSymbol<*>.name: Name","description":"com.javiersc.kotlin.compiler.extensions.fir.name","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/name.html","searchKeys":["name","val FirBasedSymbol<*>.name: Name","com.javiersc.kotlin.compiler.extensions.fir.name"]},{"name":"val FirBasedSymbol<*>.packageFqName: FqName","description":"com.javiersc.kotlin.compiler.extensions.fir.packageFqName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/package-fq-name.html","searchKeys":["packageFqName","val FirBasedSymbol<*>.packageFqName: FqName","com.javiersc.kotlin.compiler.extensions.fir.packageFqName"]},{"name":"val FirContextReceiver.typeRefName: Name?","description":"com.javiersc.kotlin.compiler.extensions.fir.typeRefName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/type-ref-name.html","searchKeys":["typeRefName","val FirContextReceiver.typeRefName: Name?","com.javiersc.kotlin.compiler.extensions.fir.typeRefName"]},{"name":"val FirElement.treeNode: FirTreeNode","description":"com.javiersc.kotlin.compiler.extensions.fir.treeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/tree-node.html","searchKeys":["treeNode","val FirElement.treeNode: FirTreeNode","com.javiersc.kotlin.compiler.extensions.fir.treeNode"]},{"name":"val FirMemberDeclaration.name: Name","description":"com.javiersc.kotlin.compiler.extensions.fir.name","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/name.html","searchKeys":["name","val FirMemberDeclaration.name: Name","com.javiersc.kotlin.compiler.extensions.fir.name"]},{"name":"val FirSession.nothingFirFunctionCall: FirFunctionCall","description":"com.javiersc.kotlin.compiler.extensions.fir.nothingFirFunctionCall","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/nothing-fir-function-call.html","searchKeys":["nothingFirFunctionCall","val FirSession.nothingFirFunctionCall: FirFunctionCall","com.javiersc.kotlin.compiler.extensions.fir.nothingFirFunctionCall"]},{"name":"val IrClass.exhaustiveKind: IrClassExhaustiveKind","description":"com.javiersc.kotlin.compiler.extensions.ir.exhaustiveKind","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/exhaustive-kind.html","searchKeys":["exhaustiveKind","val IrClass.exhaustiveKind: IrClassExhaustiveKind","com.javiersc.kotlin.compiler.extensions.ir.exhaustiveKind"]},{"name":"val IrElement.contextReceivers: List<IrValueParameter>","description":"com.javiersc.kotlin.compiler.extensions.ir.contextReceivers","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/context-receivers.html","searchKeys":["contextReceivers","val IrElement.contextReceivers: List<IrValueParameter>","com.javiersc.kotlin.compiler.extensions.ir.contextReceivers"]},{"name":"val IrElement.irType: IrType","description":"com.javiersc.kotlin.compiler.extensions.ir.irType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/ir-type.html","searchKeys":["irType","val IrElement.irType: IrType","com.javiersc.kotlin.compiler.extensions.ir.irType"]},{"name":"val IrElement.treeNode: IrTreeNode","description":"com.javiersc.kotlin.compiler.extensions.ir.treeNode","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/tree-node.html","searchKeys":["treeNode","val IrElement.treeNode: IrTreeNode","com.javiersc.kotlin.compiler.extensions.ir.treeNode"]},{"name":"val IrElement.typeParameterSymbols: List<IrTypeParameterSymbol>","description":"com.javiersc.kotlin.compiler.extensions.ir.typeParameterSymbols","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/type-parameter-symbols.html","searchKeys":["typeParameterSymbols","val IrElement.typeParameterSymbols: List<IrTypeParameterSymbol>","com.javiersc.kotlin.compiler.extensions.ir.typeParameterSymbols"]},{"name":"val IrElement.typeParameters: List<IrTypeParameter>","description":"com.javiersc.kotlin.compiler.extensions.ir.typeParameters","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/type-parameters.html","searchKeys":["typeParameters","val IrElement.typeParameters: List<IrTypeParameter>","com.javiersc.kotlin.compiler.extensions.ir.typeParameters"]},{"name":"val IrFunction.contextReceivers: List<IrValueParameter>","description":"com.javiersc.kotlin.compiler.extensions.ir.contextReceivers","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/context-receivers.html","searchKeys":["contextReceivers","val IrFunction.contextReceivers: List<IrValueParameter>","com.javiersc.kotlin.compiler.extensions.ir.contextReceivers"]},{"name":"val IrFunction.irReturn: IrReturn?","description":"com.javiersc.kotlin.compiler.extensions.ir.irReturn","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/ir-return.html","searchKeys":["irReturn","val IrFunction.irReturn: IrReturn?","com.javiersc.kotlin.compiler.extensions.ir.irReturn"]},{"name":"val IrFunctionAccessExpression.annotations: List<IrConstructorCall>","description":"com.javiersc.kotlin.compiler.extensions.ir.annotations","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/annotations.html","searchKeys":["annotations","val IrFunctionAccessExpression.annotations: List<IrConstructorCall>","com.javiersc.kotlin.compiler.extensions.ir.annotations"]},{"name":"val IrFunctionAccessExpression.callableId: CallableId","description":"com.javiersc.kotlin.compiler.extensions.ir.callableId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/callable-id.html","searchKeys":["callableId","val IrFunctionAccessExpression.callableId: CallableId","com.javiersc.kotlin.compiler.extensions.ir.callableId"]},{"name":"val IrFunctionAccessExpression.name: Name","description":"com.javiersc.kotlin.compiler.extensions.ir.name","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/name.html","searchKeys":["name","val IrFunctionAccessExpression.name: Name","com.javiersc.kotlin.compiler.extensions.ir.name"]},{"name":"val IrFunctionAccessExpression.packageFqName: FqName","description":"com.javiersc.kotlin.compiler.extensions.ir.packageFqName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/package-fq-name.html","searchKeys":["packageFqName","val IrFunctionAccessExpression.packageFqName: FqName","com.javiersc.kotlin.compiler.extensions.ir.packageFqName"]},{"name":"val IrFunctionExpression.irReturn: IrReturn?","description":"com.javiersc.kotlin.compiler.extensions.ir.irReturn","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/ir-return.html","searchKeys":["irReturn","val IrFunctionExpression.irReturn: IrReturn?","com.javiersc.kotlin.compiler.extensions.ir.irReturn"]},{"name":"val IrTreeNode.irFile: IrFile?","description":"com.javiersc.kotlin.compiler.extensions.ir.irFile","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/ir-file.html","searchKeys":["irFile","val IrTreeNode.irFile: IrFile?","com.javiersc.kotlin.compiler.extensions.ir.irFile"]},{"name":"val IrTreeNode.lineNumber: Int?","description":"com.javiersc.kotlin.compiler.extensions.ir.lineNumber","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/line-number.html","searchKeys":["lineNumber","val IrTreeNode.lineNumber: Int?","com.javiersc.kotlin.compiler.extensions.ir.lineNumber"]},{"name":"val IrTreeNode.parentIrClass: IrClass?","description":"com.javiersc.kotlin.compiler.extensions.ir.parentIrClass","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/parent-ir-class.html","searchKeys":["parentIrClass","val IrTreeNode.parentIrClass: IrClass?","com.javiersc.kotlin.compiler.extensions.ir.parentIrClass"]},{"name":"val IrTreeNode.parentIrDeclaration: IrDeclaration?","description":"com.javiersc.kotlin.compiler.extensions.ir.parentIrDeclaration","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/parent-ir-declaration.html","searchKeys":["parentIrDeclaration","val IrTreeNode.parentIrDeclaration: IrDeclaration?","com.javiersc.kotlin.compiler.extensions.ir.parentIrDeclaration"]},{"name":"val IrTreeNode.parentIrDeclarationWithName: IrDeclarationWithName?","description":"com.javiersc.kotlin.compiler.extensions.ir.parentIrDeclarationWithName","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/parent-ir-declaration-with-name.html","searchKeys":["parentIrDeclarationWithName","val IrTreeNode.parentIrDeclarationWithName: IrDeclarationWithName?","com.javiersc.kotlin.compiler.extensions.ir.parentIrDeclarationWithName"]},{"name":"val IrTreeNode.parentIrFunction: IrFunction?","description":"com.javiersc.kotlin.compiler.extensions.ir.parentIrFunction","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/parent-ir-function.html","searchKeys":["parentIrFunction","val IrTreeNode.parentIrFunction: IrFunction?","com.javiersc.kotlin.compiler.extensions.ir.parentIrFunction"]},{"name":"val IrTypeArgument.irType: IrType","description":"com.javiersc.kotlin.compiler.extensions.ir.irType","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/ir-type.html","searchKeys":["irType","val IrTypeArgument.irType: IrType","com.javiersc.kotlin.compiler.extensions.ir.irType"]},{"name":"val IrTypeArgument.type: IrType","description":"com.javiersc.kotlin.compiler.extensions.ir.type","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/type.html","searchKeys":["type","val IrTypeArgument.type: IrType","com.javiersc.kotlin.compiler.extensions.ir.type"]},{"name":"val classId: ClassId","description":"com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.classId","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.fir/-cone-node/-class-like/class-id.html","searchKeys":["classId","val classId: ClassId","com.javiersc.kotlin.compiler.extensions.fir.ConeNode.ClassLike.classId"]},{"name":"val entries: EnumEntries<IrClassExhaustiveKind>","description":"com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.entries","location":"kotlin-compiler-extensions/com.javiersc.kotlin.compiler.extensions.ir/-ir-class-exhaustive-kind/entries.html","searchKeys":["entries","val entries: EnumEntries<IrClassExhaustiveKind>","com.javiersc.kotlin.compiler.extensions.ir.IrClassExhaustiveKind.entries"]},{"name":"interface KotlinCompilerGradlePlugin : KotlinCompilerPluginSupportPlugin","description":"com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin","location":"kotlin-compiler-gradle-extensions/com.javiersc.kotlin.compiler.gradle.extensions/-kotlin-compiler-gradle-plugin/index.html","searchKeys":["KotlinCompilerGradlePlugin","interface KotlinCompilerGradlePlugin : KotlinCompilerPluginSupportPlugin","com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin"]},{"name":"open fun DependencyHandlerScope.compilerClasspath(dependency: Any)","description":"com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin.compilerClasspath","location":"kotlin-compiler-gradle-extensions/com.javiersc.kotlin.compiler.gradle.extensions/-kotlin-compiler-gradle-plugin/compiler-classpath.html","searchKeys":["compilerClasspath","open fun DependencyHandlerScope.compilerClasspath(dependency: Any)","com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin.compilerClasspath"]},{"name":"open fun Project.configureFreeCompilerArgs(compilerClasspath: Configuration)","description":"com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin.configureFreeCompilerArgs","location":"kotlin-compiler-gradle-extensions/com.javiersc.kotlin.compiler.gradle.extensions/-kotlin-compiler-gradle-plugin/configure-free-compiler-args.html","searchKeys":["configureFreeCompilerArgs","open fun Project.configureFreeCompilerArgs(compilerClasspath: Configuration)","com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin.configureFreeCompilerArgs"]},{"name":"open override fun apply(target: Project)","description":"com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin.apply","location":"kotlin-compiler-gradle-extensions/com.javiersc.kotlin.compiler.gradle.extensions/-kotlin-compiler-gradle-plugin/apply.html","searchKeys":["apply","open override fun apply(target: Project)","com.javiersc.kotlin.compiler.gradle.extensions.KotlinCompilerGradlePlugin.apply"]}]