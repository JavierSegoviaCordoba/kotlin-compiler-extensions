FILE fqName:foo.bar.some.additional.files fileName:/SomeFile.kt
FILE fqName:com.javiersc.kotlin.compiler.extensions.playground fileName:/simple-1.kt
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:hello type:kotlin.String [val]
        CALL 'public final fun run <R> (block: kotlin.Function0<R of kotlin.run>): R of kotlin.run declared in kotlin' type=kotlin.String origin=null
          <R>: kotlin.String
          block: FUN_EXPR type=kotlin.Function0<kotlin.String> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.String declared in com.javiersc.kotlin.compiler.extensions.playground.box'
                  CONST String type=kotlin.String value="Hello"
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in com.javiersc.kotlin.compiler.extensions.playground'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val hello: kotlin.String declared in com.javiersc.kotlin.compiler.extensions.playground.box' type=kotlin.String origin=null
              arg1: CONST String type=kotlin.String value="Hello"
            then: CONST String type=kotlin.String value="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST String type=kotlin.String value="Fail"
